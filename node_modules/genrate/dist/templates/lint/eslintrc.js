"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils");
function default_1(templateConfig) {
    const { ts, framework, lint = [], fvs } = templateConfig;
    const config = {
        root: true,
        plugins: [],
        extends: ['eslint:recommended'],
        rules: {
            'no-case-declarations': 'off'
        },
        env: getEnv(templateConfig),
        ignorePatterns: getIgnorePatterns(templateConfig)
    };
    if (lint.includes('stylelint')) {
        config.plugins = [...config.plugins, 'prettier'];
        config.rules = Object.assign({}, config.rules, { 'prettier/prettier': 'error' });
        config.extends = [...config.extends, 'plugin:prettier/recommended'];
    }
    if (ts) {
        if (framework === 'vue') {
            config.plugins = [...config.plugins, '@typescript-eslint'];
            config.extends = [...config.extends, 'plugin:@typescript-eslint/eslint-recommended'];
            config.parserOptions = {
                ecmaVersion: 'latest',
                extraFileExtensions: ['.vue'],
                ecmaFeatures: {
                    jsx: true
                },
                parser: {
                    js: 'espree',
                    jsx: 'espree',
                    ts: `require.resolve('@typescript-eslint/parser')`,
                    tsx: `require.resolve('@typescript-eslint/parser')`
                }
            };
        }
        else {
            config.parser = '@typescript-eslint/parser';
            config.parserOptions = { project: './tsconfig.json' };
            config.plugins = [...config.plugins, '@typescript-eslint'];
            config.rules = Object.assign({}, config.rules, {
                '@typescript-eslint/ban-ts-comment': 'off',
                '@typescript-eslint/no-floating-promises': ['error', { ignoreIIFE: true }]
            });
            config.extends = [
                ...config.extends,
                'plugin:@typescript-eslint/recommended',
                'plugin:@typescript-eslint/recommended-requiring-type-checking'
            ];
        }
    }
    else {
        config.parserOptions = { ecmaVersion: 'latest', sourceType: 'module' };
    }
    if (framework === 'vue') {
        if (fvs === '2.x') {
            config.extends = ['plugin:vue/essential', ...config.extends];
            config.overrides = [
                {
                    files: ts ? ['*.ts', '*.tsx', '*.vue'] : ['*.vue'],
                    rules: {
                        'no-unused-vars': 'off',
                        '@typescript-eslint/no-unused-vars': ts ? 'warn' : undefined
                    }
                }
            ];
            if (!ts) {
                config.parserOptions = { parser: '@babel/eslint-parser' };
            }
        }
        else {
            config.extends = ['plugin:vue/vue3-essential', ...config.extends];
            config.overrides = [
                {
                    files: ts ? ['*.ts', '*.tsx', '*.vue'] : ['*.vue'],
                    rules: {
                        'no-unused-vars': 'off',
                        '@typescript-eslint/no-unused-vars': ts ? 'warn' : undefined
                    }
                }
            ];
        }
    }
    return `module.exports = ${(0, utils_1.stringify)(config)}`.replace(/('|")(?=require.*?\()|(?<=require.*?\(.+?\))("|')/g, '');
}
exports.default = default_1;
function getEnv(templateConfig) {
    const env = { node: true };
    const { framework = '', test, ts } = templateConfig;
    if (framework) {
        env.node = true;
        env.browser = true;
    }
    if (['nest'].includes(framework)) {
        env.browser = false;
    }
    if (test && !ts) {
        env.jest = true;
    }
    return env;
}
function getIgnorePatterns({ lib, test, e2e }) {
    let ignorePatterns = ['/*.js', '/*.json', '**/dist/**'];
    if (test) {
        ignorePatterns = [...ignorePatterns, '**/test/**'];
    }
    if (lib) {
        ignorePatterns = [...ignorePatterns, '**/types/**'];
    }
    if (test && e2e) {
        ignorePatterns = [...ignorePatterns, 'cypress.config.js', '**/cypress/**'];
    }
    return ignorePatterns;
}
