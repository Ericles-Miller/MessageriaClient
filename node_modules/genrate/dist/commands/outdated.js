"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const path_1 = require("path");
const npm_1 = __importDefault(require("../utils/npm"));
const text_table_1 = __importDefault(require("text-table"));
const utils_1 = require("../utils");
const fs_1 = require("../utils/fs");
const constants_1 = require("../utils/constants");
async function outdated() {
    let templates = await (0, fs_1.readdir)(constants_1.TEMPLATE_PATH);
    const THead = ['Template', 'Current', 'Latest'].map((s) => chalk_1.default.underline(s));
    templates = templates.filter((item) => (0, fs_1.isDirectory)((0, path_1.join)(constants_1.TEMPLATE_PATH, item)));
    const TBody = templates.length
        ? await Promise.all(templates.map((template, index) => {
            return new Promise((resolve) => {
                const currentVersion = npm_1.default.readPackageJson((0, path_1.join)(constants_1.TEMPLATE_PATH, template)).version;
                setTimeout(() => {
                    npm_1.default
                        .getLatestVersion(template)
                        .then((latestVersion) => {
                        const isUpdate = (0, utils_1.compareVersion)(currentVersion, latestVersion) === 1;
                        resolve([
                            chalk_1.default.red(template),
                            chalk_1.default.magenta(currentVersion),
                            isUpdate ? chalk_1.default.green(latestVersion) : chalk_1.default.magenta(latestVersion)
                        ]);
                    })
                        .catch(() => resolve([chalk_1.default.red(template), chalk_1.default.magenta(currentVersion), '*']));
                }, index * 400);
            });
        }))
        : [['empty', 'empty', 'empty']];
    (0, utils_1.output)((0, text_table_1.default)([THead, ...TBody], {
        align: ['l', 'r', 'r'],
        stringLength: (s) => ansiTrim(s).length
    }));
}
exports.default = outdated;
function ansiTrim(str) {
    const r = new RegExp('\x1b(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|' + '\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)', 'g');
    return str.replace(r, '');
}
