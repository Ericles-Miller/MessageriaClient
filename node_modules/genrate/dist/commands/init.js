"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const configs_1 = require("../configs");
const lodash_1 = require("lodash");
const prompts_1 = __importDefault(require("prompts"));
const utils_1 = require("../utils");
const fs_1 = require("../utils/fs");
async function init() {
    const questions = [
        { type: 'toggle', name: 'ts', active: 'yes', inactive: 'no', initial: true, message: 'Use the TypeScript language?' },
        { type: 'toggle', name: 'lib', active: 'yes', inactive: 'no', initial: false, message: 'Create a library project?' },
        {
            type: 'select',
            name: 'framework',
            message: 'Select a framework?',
            choices: [
                { title: colors('vue'), value: 'vue' },
                { title: colors('node'), value: 'node' },
                { title: colors('nest'), value: 'nest' },
                { title: colors('react'), value: 'react' },
                { title: colors('vanilla'), value: 'vanilla' },
                { title: colors('electron'), value: 'electron' }
            ]
        },
        {
            type: 'multiselect',
            name: 'lint',
            instructions: false,
            message: 'Select the lint tools',
            hint: '- Space to select. Return to submit',
            choices: [
                { title: 'ESlint', value: 'eslint' },
                { title: 'Stylelint', value: 'stylelint' },
                { title: 'Commitlint', value: 'commitlint' }
            ]
        },
        { type: 'toggle', name: 'test', active: 'yes', inactive: 'no', initial: false, message: 'Add unit testing?' },
        {
            type: (prev) => (prev == true ? 'toggle' : null),
            name: 'e2e',
            active: 'yes',
            inactive: 'no',
            initial: false,
            message: 'Add an End-to-End Testing Solution?'
        }
    ];
    const dest = (0, utils_1.toAbsolutePath)(process.argv[3] || process.cwd());
    if (!(await (0, fs_1.isEmptyDirectory)(dest))) {
        const answers = await (0, prompts_1.default)([
            {
                initial: true,
                type: 'confirm',
                name: 'overwrite',
                message: 'Current directory is not empty. Remove existing files and continue?'
            }
        ]);
        if (!answers.overwrite) {
            return;
        }
        (0, fs_1.rmDirSync)(dest);
    }
    const templateConfig = getTemplateConfig(await (0, prompts_1.default)(questions));
    (0, fs_1.createProject)(await (0, configs_1.parse)({ config: templateConfig }, dest), dest);
    (0, utils_1.output)(`Generated project in ${dest}

Next steps:
  ${process.argv[4] ? '\n  cd ' + process.argv[4] : ''}
  npm install
  npm run dev`);
}
exports.default = init;
function getTemplateConfig(answers) {
    if (answers.framework === 'node') {
        delete answers.framework;
    }
    return Object.assign({}, { vscode: [], dirs: ['src'] }, answers);
}
function colors(type) {
    const colors = {
        vue: '#42B883',
        node: '#046E01',
        nest: '#E0234D',
        react: '#61DAFB',
        vanilla: '#FF6600',
        electron: '#9EEAF9'
    };
    return chalk_1.default.hex(colors[type])((0, lodash_1.capitalize)(type));
}
