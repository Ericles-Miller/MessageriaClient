"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const prompts_1 = __importDefault(require("prompts"));
const npm_1 = __importDefault(require("../utils/npm"));
const npm_package_arg_1 = __importDefault(require("npm-package-arg"));
const configs_1 = require("../configs");
const constants_1 = require("../utils/constants");
const fs_1 = require("../utils/fs");
const utils_1 = require("../utils");
async function use(template = '') {
    if (!template) {
        return (0, utils_1.output)('Please enter [template] name');
    }
    const dest = (0, utils_1.toAbsolutePath)(process.argv[4] || process.cwd());
    const { name, version } = parsePackageName(template);
    const templatePath = (0, path_1.join)(constants_1.TEMPLATE_PATH, name);
    if (!(await (0, fs_1.isEmptyDirectory)(dest))) {
        const answers = await (0, prompts_1.default)([
            {
                initial: true,
                type: 'confirm',
                name: 'overwrite',
                message: 'Current directory is not empty. Remove existing files and continue?'
            }
        ]);
        if (!answers.overwrite) {
            return;
        }
        (0, fs_1.rmDirSync)(dest);
    }
    if (!(0, fs_1.isDirectory)(templatePath)) {
        if (await npm_1.default.checkPackageValid(name, version)) {
            const url = await npm_1.default.getCompressedPackageUrl(name, version);
            const zipPath = await (0, utils_1.download)(url, constants_1.TMP_PATH);
            await (0, utils_1.unzip)(zipPath, templatePath, { override: true });
        }
        else {
            return (0, utils_1.output)(`The [${template}] not found or is illegal`);
        }
    }
    const templateConfig = await (0, utils_1.loadTemplateConfig)(templatePath);
    if (templateConfig) {
        (0, fs_1.createProject)(await (0, configs_1.parse)(templateConfig, dest), dest);
        (0, utils_1.output)(`Generated project in ${dest}

Next steps:
  ${process.argv[4] ? '\n  cd ' + process.argv[4] : ''}
  npm install
  npm run dev`);
    }
    else {
        (0, utils_1.output)(`The [${template}] is illegal`);
    }
}
exports.default = use;
function parsePackageName(packageName) {
    const { name, rawSpec } = (0, npm_package_arg_1.default)(packageName);
    return rawSpec === '*' ? { name, version: 'latest' } : { name, version: rawSpec };
}
