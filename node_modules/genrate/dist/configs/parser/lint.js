"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const templates_1 = __importDefault(require("../../templates"));
const utils_1 = require("../../utils");
function default_1(rule, templateConfig) {
    if (rule === 'husky') {
        let files = [];
        const { lint = [] } = templateConfig;
        if (lint.includes('stylelint') || lint.includes('eslint')) {
            files = [...files, ['.husky/pre-commit', templates_1.default.lint.husky('npx --no-install lint-staged')]];
        }
        if (lint.includes('commitlint')) {
            files = [...files, ['.husky/commit-msg', templates_1.default.lint.husky('npx --no-install commitlint --edit "$1"')]];
        }
        if (lint.includes('stylelint')) {
            files = [...files, ['.lintstagedrc', templates_1.default.lint.lintstaged('prettier', templateConfig)]];
        }
        if (lint.includes('eslint')) {
            files = [...files, ['.lintstagedrc', templates_1.default.lint.lintstaged('eslint', templateConfig)]];
        }
        files = mergeLintstagedRc(files);
        return {
            files,
            dirs: ['.husky'],
            devDependencies: { husky: '8.0.1', 'lint-staged': '13.0.3' }
        };
    }
    if (rule === 'stylelint') {
        return {
            devDependencies: { prettier: '2.7.1' },
            files: [['.prettierrc', templates_1.default.lint.prettier]]
        };
    }
    if (rule === 'commitlint') {
        return {
            devDependencies: {
                commitizen: '4.2.5',
                'cz-customizable': '7.0.0',
                '@commitlint/cli': '17.2.0',
                '@commitlint/config-conventional': '17.2.0'
            },
            files: [
                ['.czrc', templates_1.default.lint.cz],
                ['.cz-config.js', templates_1.default.lint.czconf],
                ['.commitlintrc', templates_1.default.lint.commitlint]
            ]
        };
    }
    if (rule === 'eslint') {
        let devDependencies = {
            eslint: '8.26.0'
        };
        if (templateConfig.ts) {
            devDependencies = Object.assign({}, devDependencies, {
                '@typescript-eslint/parser': '5.42.0',
                '@typescript-eslint/eslint-plugin': '5.42.0'
            });
        }
        if (templateConfig.lint?.includes('stylelint')) {
            devDependencies = Object.assign({}, devDependencies, {
                'eslint-plugin-prettier': '4.2.1',
                'eslint-config-prettier': '8.5.0'
            });
        }
        if (templateConfig.framework === 'vue') {
            if (templateConfig.fvs === '3.x' || !templateConfig.fvs) {
                devDependencies = Object.assign({}, devDependencies, {
                    'eslint-plugin-vue': '9.8.0'
                });
            }
            if (templateConfig.fvs === '2.x') {
                devDependencies = Object.assign({}, devDependencies, {
                    '@babel/eslint-parser': '7.19.1',
                    '@vue/cli-plugin-eslint': '5.0.8',
                    'eslint-plugin-vue': '8.7.1'
                });
            }
        }
        return {
            devDependencies,
            files: [['.eslintrc.js', templates_1.default.lint.eslint(templateConfig)]]
        };
    }
    return { files: [] };
}
exports.default = default_1;
function mergeLintstagedRc(files) {
    const lintstagedrc = files
        .filter(([fileName]) => fileName === '.lintstagedrc')
        .reduce((result, file) => {
        const json = JSON.parse(file[1]);
        for (const key in json) {
            if (result[key] && Array.isArray(result[key])) {
                result[key] = [...result[key], json[key]];
            }
            else if (result[key]) {
                result[key] = [result[key], json[key]];
            }
            else {
                result[key] = json[key];
            }
        }
        return result;
    }, {});
    if ((0, lodash_1.isEmpty)(lintstagedrc)) {
        return files;
    }
    else {
        files = files.filter(([fileName]) => fileName !== '.lintstagedrc');
        return [...files, ['.lintstagedrc', (0, utils_1.stringify)(lintstagedrc)]];
    }
}
