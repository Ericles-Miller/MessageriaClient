"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = void 0;
const path_1 = require("path");
const parser = __importStar(require("./parser"));
const lodash_1 = require("lodash");
async function parse(templateConfig, dest) {
    let { config } = templateConfig;
    const { preprepare, postprepare } = templateConfig;
    let struct = defaultStruct();
    if (typeof config == 'function') {
        config = await config((await Promise.resolve().then(() => __importStar(require('prompts')))).default);
    }
    if (preprepare) {
        const result = await preprepare((0, lodash_1.cloneDeep)(struct), (0, lodash_1.cloneDeep)(config), dest);
        if (result) {
            struct = merge(struct, result);
        }
    }
    struct = parseConfig(struct, config, dest);
    if (postprepare) {
        const result = await postprepare((0, lodash_1.cloneDeep)(struct), (0, lodash_1.cloneDeep)(config), dest);
        if (result) {
            struct = merge(struct, result);
        }
    }
    return struct;
}
exports.parse = parse;
function parseConfig(struct, config, dest) {
    const { dirs = [], files = [], lint = [] } = config;
    struct = merge(struct, { files });
    struct = merge(struct, { dirs, files: [] });
    struct = merge(struct, parser.tsConfig(config));
    struct = merge(struct, parser.e2eConfig(config));
    struct = merge(struct, parser.testConfig(config));
    struct = merge(struct, parser.vsCodeConfig(config));
    struct = merge(struct, parser.ignoreConfig(config));
    struct = merge(struct, parser.bundlerConfig(config));
    ((0, lodash_1.isEmpty)(lint) ? lint : ['husky', ...lint]).forEach((rule) => (struct = merge(struct, parser.lintConfig(rule, config))));
    return merge(struct, parser.pkgConfig((0, path_1.basename)(dest), config, struct));
}
function merge(object, source) {
    const objectClone = Object.assign({}, defaultStruct(), object);
    const sourceClone = Object.assign({}, defaultStruct(), source);
    return {
        files: [...objectClone.files, ...sourceClone.files],
        dirs: (0, lodash_1.uniq)([...objectClone.dirs, ...sourceClone.dirs]),
        dependencies: Object.assign({}, objectClone.dependencies, sourceClone.dependencies),
        devDependencies: Object.assign({}, objectClone.devDependencies, sourceClone.devDependencies)
    };
}
function defaultStruct() {
    return {
        dirs: [],
        files: [],
        dependencies: {},
        devDependencies: {}
    };
}
