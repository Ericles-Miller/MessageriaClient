"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = exports.loadTemplateConfig = exports.dynamicImport = exports.compareVersion = exports.toAbsolutePath = exports.output = exports.unzip = exports.download = void 0;
const npm_1 = __importDefault(require("./npm"));
const axios_1 = __importDefault(require("axios"));
const decompress_1 = __importDefault(require("decompress"));
const fs_1 = require("fs");
const path_1 = require("path");
const fs_2 = require("./fs");
function download(url, dest) {
    return new Promise((resolve, reject) => {
        void axios_1.default.get(url, { responseType: 'stream' }).then((res) => {
            const destPath = (0, path_1.join)(dest, (0, path_1.basename)(url));
            res.data
                .pipe((0, fs_1.createWriteStream)(destPath))
                .on('close', () => resolve(destPath))
                .on('error', (error) => reject(error));
        });
    });
}
exports.download = download;
async function unzip(filePath, dest, options = { override: false }) {
    if (options.override && (0, fs_2.isDirectory)(dest)) {
        (0, fs_2.rmDirSync)(dest);
    }
    (0, fs_2.createDirSync)(dest);
    await (0, decompress_1.default)(filePath, dest, { strip: 1 });
    return dest;
}
exports.unzip = unzip;
function output(message) {
    console.log(`${message}\n`);
}
exports.output = output;
function toAbsolutePath(path) {
    return (0, path_1.isAbsolute)(path) ? path : (0, path_1.resolve)((0, path_1.join)(process.cwd(), path));
}
exports.toAbsolutePath = toAbsolutePath;
function compareVersion(targetVerison, currentVersion) {
    const targetVersions = targetVerison.split('.');
    const currentVersions = currentVersion.split('.');
    for (let index = 0, num1, num2; index < targetVersions.length; index++) {
        num1 = parseInt(targetVersions[index], 10) || 0;
        num2 = parseInt(currentVersions[index], 10) || 0;
        if (num1 > num2)
            return -1;
        if (num1 < num2)
            return 1;
    }
    return 0;
}
exports.compareVersion = compareVersion;
async function dynamicImport(path) {
    return (await Promise.resolve().then(() => __importStar(require(path))).then((val) => val)).default;
}
exports.dynamicImport = dynamicImport;
async function loadTemplateConfig(path) {
    const { main = '', preprepare = '', postprepare = '' } = npm_1.default.readPackageJson((0, path_1.join)(path)).template || {};
    if (main) {
        const templateConfig = {
            config: await dynamicImport((0, path_1.resolve)((0, path_1.join)(path, main)))
        };
        if (preprepare) {
            templateConfig.preprepare = await dynamicImport((0, path_1.resolve)((0, path_1.join)(path, preprepare)));
        }
        if (postprepare) {
            templateConfig.postprepare = await dynamicImport((0, path_1.resolve)((0, path_1.join)(path, postprepare)));
        }
        return templateConfig;
    }
    else {
        return null;
    }
}
exports.loadTemplateConfig = loadTemplateConfig;
function stringify(value) {
    return JSON.stringify(value, null, 2);
}
exports.stringify = stringify;
