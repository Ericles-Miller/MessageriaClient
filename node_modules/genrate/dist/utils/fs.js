"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProject = exports.isEmptyDirectory = exports.writeFileSync = exports.readPackageJson = exports.readdir = exports.rmDirSync = exports.isDirectory = exports.createDirSync = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const rimraf_1 = __importDefault(require("rimraf"));
const path_1 = require("path");
const shell_1 = require("./shell");
const path_2 = require("path");
function createDirSync(path) {
    fs_extra_1.default.ensureDirSync(path);
    return path;
}
exports.createDirSync = createDirSync;
function isDirectory(path) {
    try {
        return fs_extra_1.default.lstatSync(path).isDirectory();
    }
    catch (error) {
        return false;
    }
}
exports.isDirectory = isDirectory;
function rmDirSync(path) {
    const files = fs_extra_1.default.readdirSync(path);
    for (const file of files.filter((file) => !isdotfile(file))) {
        rimraf_1.default.sync((0, path_1.join)(path, file));
    }
}
exports.rmDirSync = rmDirSync;
async function readdir(path) {
    const dirs = await fs_extra_1.default.readdir(path);
    return dirs.reduce((previousValue, currentValue) => {
        if (currentValue.startsWith('@')) {
            return [...previousValue, ...fs_extra_1.default.readdirSync((0, path_1.join)(path, currentValue)).map((value) => (0, path_1.join)(currentValue, value))];
        }
        else {
            return [...previousValue, currentValue];
        }
    }, []);
}
exports.readdir = readdir;
function readPackageJson(path) {
    return fs_extra_1.default.readJsonSync(path);
}
exports.readPackageJson = readPackageJson;
function writeFileSync(path, data) {
    fs_extra_1.default.writeFileSync(path, data, { encoding: 'utf8', mode: 0o0755 });
}
exports.writeFileSync = writeFileSync;
async function isEmptyDirectory(path) {
    if (isDirectory(path)) {
        const dirs = await fs_extra_1.default.readdir(path);
        return !dirs.length;
    }
    else {
        return true;
    }
}
exports.isEmptyDirectory = isEmptyDirectory;
function createProject(struct, dest, vcs = true) {
    const { files, dirs } = struct;
    for (const dir of dirs) {
        createDirSync((0, path_1.join)(dest, dir));
    }
    for (const [fileName, content] of files) {
        const filePath = (0, path_1.join)(dest, fileName);
        const dirPath = (0, path_2.dirname)(filePath);
        if (!isDirectory(dirPath)) {
            createDirSync(dirPath);
        }
        writeFileSync(filePath, content);
    }
    if (vcs) {
        (0, shell_1.exec)('git init', { cwd: dest });
    }
}
exports.createProject = createProject;
function isdotfile(fileName) {
    return /(?:^|[\\\/])(\.(?!\.)[^\\\/]+)$/.test(fileName);
}
